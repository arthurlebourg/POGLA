#version 450

layout (triangles_adjacency) in;
layout (line_strip, max_vertices = 2) out;

in TCE_OUT {
    vec3 position;
    vec3 normal;
    vec2 uv;
} tce_out[];

out GS_OUT {
    vec3 color;
    vec2 uv;
} gs_out;

uniform vec3 light_pos;

vec3 object_color = vec3(1.0, 1.0, 1.0);
vec3 light_color = vec3(1.0, 1.0, 1.0);

float ambientStrength = 0.1;
float specularStrength = 0.5;

uniform mat4 model_view_matrix;
uniform mat4 projection_matrix;

void main()
{
    for (int i = 0; i < 6; i++)
    {
        gs_out.uv = tce_out[i].uv;
        vec3 normal = normalize(tce_out[i].normal);
        //gl_Position = projection_matrix * model_view_matrix * gl_in[i].gl_Position;
        //EmitVertex();

        vec3 light_direction = normalize(light_pos - gl_in[i].gl_Position.xyz);
        vec3 normal_direction = normalize(normal);
        float diffuse = max(dot(light_direction, normal_direction), 0.0);
        vec3 view_direction = normalize((transpose(model_view_matrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - gl_in[i].gl_Position.xyz);
        vec3 half_direction = normalize(light_direction + view_direction);
        float specular = pow(max(dot(normal_direction, half_direction), 0.0), 32.0);
        gs_out.color = object_color * (diffuse + specular);
        gl_Position = projection_matrix * model_view_matrix * gl_in[i].gl_Position;
        EmitVertex();
    }

    EndPrimitive();
}