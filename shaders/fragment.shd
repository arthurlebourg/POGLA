#version 450

in GS_OUT {
    vec3 color;
} gs_out;

layout(location = 0) out vec4 output_color;

uniform sampler2D texture_sampler;

void main()
{
    /*vec3 position = gs_out.position;
    vec3 normal = normalize(gs_out.normal);
    vec2 uv = gs_out.uv;
    
    vec3 ambient = ambientStrength * light_color;

    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(light_pos - position);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * light_color;

    vec3 viewDir = normalize(cam_pos - position);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(cam_pos, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * light_color;

    vec3 res = (ambient + diffuse) * object_color;
    //output_color = vec4(1.0);
    //output_color = vec4(res, 1.0f) * texture(texture_sampler, uv_frag);*/

    output_color = vec4(gs_out.color, 1.0);//* texture(texture_sampler, gs_out.uv);
    //output_color = vec4(tce_out.color, 1.0);//* texture(texture_sampler, gs_out.uv);
    //output_color = vec4(1.0, 0.0, 0.0, 1.0);
}
