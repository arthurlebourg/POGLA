#version 450

layout(vertices = 2) out;

in VS_OUT {
    vec3 normal;
    vec2 uv;
} vs_out[]; // 1 is the adjencent vertex

out TCS_OUT {
    vec3 normal;
    vec2 uv;
} tcs_out[];

uniform mat4 model_view_matrix;
uniform mat4 projection_matrix;

void main()
{
    vec3 normal_main = normalize(vs_out[0].normal);// + vs_out[2].normal + vs_out[3].normal);
    vec3 normal_adj = normalize(vs_out[1].normal);

    vec3 center_main = (gl_in[0].gl_Position.xyz + gl_in[2].gl_Position.xyz + gl_in[3].gl_Position.xyz) / 3.0;
    vec3 center_adj = (gl_in[0].gl_Position.xyz + gl_in[1].gl_Position.xyz + gl_in[2].gl_Position.xyz) / 3.0;
    
    vec3 cam_pos = vec3(inverse(model_view_matrix) * vec4(0.0, 0.0, 0.0, 1.0));

    float dot_main = dot(normalize(cam_pos - center_main), normal_main);
    float dot_adj = dot(normal_adj, normalize(cam_pos - center_adj));

    
    if (dot_main * dot_adj > 0)
    {
        return;
    }

    gl_TessLevelOuter[0] = 1.0;
    gl_TessLevelOuter[1] = 1.0;
    gl_TessLevelOuter[2] = 1.0;
    gl_TessLevelOuter[3] = 1.0;

    gl_TessLevelInner[0] = 1.0;
    gl_TessLevelInner[1] = 1.0;

    tcs_out[gl_InvocationID].normal = vs_out[gl_InvocationID].normal;
    tcs_out[gl_InvocationID].uv = vs_out[gl_InvocationID].uv;
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}